# /scheduler/scheduler-rbac.yaml

---
# Service Account for the custom scheduler Pod
apiVersion: v1
kind: ServiceAccount
metadata:
  name: custom-scheduler-sa
  namespace: kube-system # Recommended namespace for cluster components

---
# ClusterRole defining permissions needed by the custom scheduler
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: custom-scheduler-role
rules:
  # Allow watching, listing, and getting pods cluster-wide to find unscheduled ones.
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  # Allow getting, listing, and watching nodes for predicate checks and metric correlation.
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  # Allow creating pod binding objects to schedule pods to nodes. This is the core scheduling action.
  # Note: This uses the pod's namespace, which is retrieved when binding.
  - apiGroups: [""]
    resources: ["pods/binding"]
    verbs: ["create"]
  # Allow creating and patching events to report scheduling decisions and failures.
  # Events are namespaced to the pod being scheduled.
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  # Optional: Allow updating pod status. Binding is preferred, but some older examples might use this.
  # Keep commented out unless specifically needed by scheduler logic.
  # - apiGroups: [""]
  #   resources: ["pods/status"]
  #   verbs: ["patch", "update"]

---
# ClusterRoleBinding linking the ServiceAccount to the ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: custom-scheduler-rb # Binding name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: custom-scheduler-role # Link to the ClusterRole defined above
subjects:
  - kind: ServiceAccount
    name: custom-scheduler-sa # The ServiceAccount name
    namespace: kube-system # The namespace of the ServiceAccount
